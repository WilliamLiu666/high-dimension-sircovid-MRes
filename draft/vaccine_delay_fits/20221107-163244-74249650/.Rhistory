hist(output[1,1:N])
plot(output[1,1:N])
var(output[1,1:N])
library(mvtnorm)
d <- 1
N <- 10000
h <- d^(-1/2)
mean <- matrix(0,d,1)
sigma <- diag(1,d)
output <- matrix(0,d,N)
output[1:d,1] <- rmvnorm(1,mean,sigma)
for(i in 2:N){
x <- rmvnorm(1,mean,sigma*h^2)
u <- runif(1)
a <- log(dmvnorm(x, mean, sigma*h^2))
b <- log(dmvnorm(output[1:d,i-1], mean, sigma*h^2))
if (log(u) < (a-b)){
output[1:d,i] = x
}
else{
output[1:d,i] = output[1:d,i-1]
}
}
var(output[1,1:N])
library(mvtnorm)
d <- 1
N <- 10000
h <- d^(-1/2)
mean <- matrix(0,d,1)
sigma <- diag(1,d)
output <- matrix(0,d,N)
output[1:d,1] <- rmvnorm(1,mean,sigma)
for(i in 2:N){
x <- rmvnorm(1,output[1:d,i-1],sigma*h^2)
u <- runif(1)
a <- log(dmvnorm(x, mean, sigma*h^2))
b <- log(dmvnorm(output[1:d,i-1], mean, sigma*h^2))
if (log(u) < (a-b)){
output[1:d,i] = x
}
else{
output[1:d,i] = output[1:d,i-1]
}
}
var(output[1,1:N])
library(mvtnorm)
d <- 10
N <- 10000
h <- d^(-1/2)
mean <- matrix(0,d,1)
sigma <- diag(1,d)
output <- matrix(0,d,N)
output[1:d,1] <- rmvnorm(1,mean,sigma)
for(i in 2:N){
x <- rmvnorm(1,output[1:d,i-1],sigma*h^2)
u <- runif(1)
a <- log(dmvnorm(x, mean, sigma*h^2))
b <- log(dmvnorm(output[1:d,i-1], mean, sigma*h^2))
if (log(u) < (a-b)){
output[1:d,i] = x
}
else{
output[1:d,i] = output[1:d,i-1]
}
}
var(output[1,1:N])
library(mvtnorm)
d <- 2
N <- 10000
h <- d^(-1/2)
mean <- matrix(0,d,1)
sigma <- diag(1,d)
output <- matrix(0,d,N)
output[1:d,1] <- rmvnorm(1,mean,sigma)
for(i in 2:N){
x <- rmvnorm(1,output[1:d,i-1],sigma*h^2)
u <- runif(1)
a <- log(dmvnorm(x, mean, sigma*h^2))
b <- log(dmvnorm(output[1:d,i-1], mean, sigma*h^2))
if (log(u) < (a-b)){
output[1:d,i] = x
}
else{
output[1:d,i] = output[1:d,i-1]
}
}
var(output[1,1:N])
HMC = function (U, grad_U, epsilon, L, current_q)
{
q = current_q
### a line to reject state with a given gradient, a way of restraining to the positive value of q
### in the case of the exponential case, probably not the best way of doing it
if(norm(grad_U(q)< -1e5)) return (current_q)
p = rnorm(length(q),0,1) # independent standard normal variates
current_p = p
# Make a half step for momentum at the beginning
p = p - epsilon * grad_U(q) / 2
# Alternate full steps for position and momentum
for (i in 1:L)
{
# Make a full step for the position
q = q + epsilon * p
# Make a full step for the momentum, except at end of trajectory
if (i!=L) p = p - epsilon * grad_U(q)
}
# Make a half step for momentum at the end.
p = p - epsilon * grad_U(q) / 2
# Negate momentum at end of trajectory to make the proposal symmetric
p = -p
# Evaluate potential and kinetic energies at start and end of trajectory
current_U = U(current_q)
current_K = sum(current_p^2) / 2
proposed_U = U(q)
proposed_K = sum(p^2) / 2
# Accept or reject the state at end of trajectory, returning either
# the position at the end of the trajectory or the initial position
if (runif(1) < exp(current_U-proposed_U+current_K-proposed_K))
{
return (q) # accept
}
else
{
return (current_q) # reject
}
}
#define U and Grad_u
U = function(x) t(x) %*% sigma_inv %*% x/2
grad_U = function(x) sigma_inv %*% x
#compute sigma invrse
library(matlib)
sigma = matrix(1,2,2)
sigma[1,2] = 0
sigma[2,1] = 0
sigma_inv = inv(sigma)
#initialize parameters
N <- 10000
q <- c(0,0)
epsilon <- .001
L <- 1000
output <- matrix(0,N,2)
#HMC
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i,1:2] <- q
}
var(output[1,1:N])
var(output[1])
var(output[1:N,1])
library(mvtnorm)
d <- 2
N <- 10000
h <- d^(-1/2)
mean <- matrix(0,d,1)
sigma <- diag(1,d)
output <- matrix(0,N,d)
output[1,1:d] <- rmvnorm(1,mean,sigma)
for(i in 2:N){
x <- rmvnorm(1,output[i-1,1:d],sigma*h^2)
u <- runif(1)
a <- log(dmvnorm(x, mean, sigma*h^2))
b <- log(dmvnorm(output[i-1,1:d], mean, sigma*h^2))
if (log(u) < (a-b)){
output[i,1:d] = x
}
else{
output[i,1:d] = output[i-1,1:d]
}
}
var(output[1:N,1])
#define U and Grad_u
U = function(x) t(x) %*% sigma_inv %*% x/2
grad_U = function(x) sigma_inv %*% x
#compute sigma invrse
library(matlib)
sigma = matrix(1,2,2)
sigma[1,2] = 0
sigma[2,1] = 0
sigma_inv = inv(sigma)
#initialize parameters
N <- 10000
q <- c(0,0)
epsilon <- .001
L <- 1000
output <- matrix(0,N,2)
#HMC
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i,1:2] <- q
}
var(output[1:N,1])
#define U and Grad_u
U = function(x) t(x) %*% sigma_inv %*% x/2
grad_U = function(x) sigma_inv %*% x
#compute sigma invrse
d <- 10
library(matlib)
sigma = diag(1,d)
sigma_inv = inv(sigma)
#initialize parameters
N <- 10000
q <- c(0,0)
epsilon <- .001
L <- 1000
output <- matrix(0,N,d)
#HMC
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i,1:d] <- q
}
#define U and Grad_u
U = function(x) t(x) %*% sigma_inv %*% x/2
grad_U = function(x) sigma_inv %*% x
#compute sigma invrse
d <- 10
library(matlib)
sigma = diag(1,d)
sigma_inv = inv(sigma)
#initialize parameters
N <- 10000
q <- rep(0,d)
epsilon <- .001
L <- 1000
output <- matrix(0,N,d)
#HMC
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i,1:d] <- q
}
var(output[1:N,1])
library(mvtnorm)
d <- 2
N <- 10000
h <- d^(-1/2)
mean <- matrix(0,d,1)
sigma <- diag(1,d)
output <- matrix(0,N,d)
output[1,1:d] <- rmvnorm(1,mean,sigma)
for(i in 2:N){
x <- rmvnorm(1,output[i-1,1:d],sigma)
u <- runif(1)
a <- log(dmvnorm(x, mean, sigma))
b <- log(dmvnorm(output[i-1,1:d], mean, sigma))
if (log(u) < (a-b)){
output[i,1:d] = x
}
else{
output[i,1:d] = output[i-1,1:d]
}
}
var(output[1:N,1])
hist(output[1:N,1])
library(mvtnorm)
d <- 2
N <- 10000
h <- d^(-1/2)
mean <- matrix(0,d,1)
sigma <- diag(1,d)
output <- matrix(0,N,d)
output[1,1:d] <- rmvnorm(1,mean,sigma)
for(i in 2:N){
x <- rmvnorm(1,output[i-1,1:d],sigma*h^2)
u <- runif(1)
a <- log(dmvnorm(x, mean, sigma))
b <- log(dmvnorm(output[i-1,1:d], mean, sigma))
if (log(u) < (a-b)){
output[i,1:d] = x
}
else{
output[i,1:d] = output[i-1,1:d]
}
}
var(output[1:N,1])
setwd("C:/Users/WILL LIU/Desktop/Data Science/high-dimension-sircovid-MRes/draft/vaccine_delay_fits/20221107-163244-74249650")
data_rtm <- read_csv("data/rtm.csv")
data_serology <- read_csv("data/serology.csv")
#This trims off dates and columns we don't want
data <- spim_data(
date, region, model_type, data_rtm, data_serology,
trim_deaths, trim_pillar2,
full_data = FALSE)
setwd("C:/Users/WILL LIU/Desktop/Data Science/high-dimension-sircovid-MRes")
orderly::orderly_run(
"vaccine_delay_fits_data"
)
orderly::orderly_run(
"vaccine_delay_parameters_fits",
parameters = list(deterministic = TRUE),
use_draft = "newer")
orderly::orderly_develop_start('vaccine_delay_fits',
parameters = list(region = "london",
short_run = TRUE,
deterministic = TRUE),
use_draft = "newer")
data_rtm <- read_csv("data/rtm.csv")
data_serology <- read_csv("data/serology.csv")
#This trims off dates and columns we don't want
data <- spim_data(
date, region, model_type, data_rtm, data_serology,
trim_deaths, trim_pillar2,
full_data = FALSE)
#Some more particle filter setup, this object can then be "run" below
filter <- spimalot::spim_particle_filter(data, pars$mcmc,
control$particle_filter,
deterministic)
setwd("C:/Users/WILL LIU/Desktop/Data Science/high-dimension-sircovid-MRes/draft/vaccine_delay_fits/20221107-163244-74249650")
data_rtm <- read_csv("data/rtm.csv")
data_serology <- read_csv("data/serology.csv")
#This trims off dates and columns we don't want
data <- spim_data(
date, region, model_type, data_rtm, data_serology,
trim_deaths, trim_pillar2,
full_data = FALSE)
setwd("C:/Users/WILL LIU/Desktop/Data Science/high-dimension-sircovid-MRes")
orderly::orderly_develop_start('vaccine_delay_fits',
parameters = list(region = "london",
short_run = TRUE,
deterministic = TRUE),
use_draft = "newer")
data_rtm <- read_csv("data/rtm.csv")
region = "london"
short_run = TRUE
deterministic = TRUE
setwd("C:/Users/WILL LIU/Desktop/Data Science/high-dimension-sircovid-MRes")
orderly::orderly_develop_start('vaccine_delay_fits',
parameters = list(region = "london",
short_run = TRUE,
deterministic = TRUE),
use_draft = "newer")
source("global_util.R")
version_check("sircovid", "0.13.15")
version_check("spimalot", "0.7.11")
date <- "2021-09-13"
model_type <- "BB"
#Some data streams are unreliable for the last few days. Define how many days here.
trim_deaths <- 4
trim_pillar2 <- 5
## MCMC control (only applies if short_run = FALSE)
burnin <- 500
n_mcmc <- 1500
chains <- 4
kernel_scaling <- 0.2
#Checks current region is valid
region <- spimalot::spim_check_region(region, FALSE)
#Checks and assembles all the outputs from vaccine_delay_parameter_fits task
#Output pars is a list containing:
#info - the loaded info.csv
#prior - the loaded prior.csv
#proposal - the loaded proposal.csv
#transform - the functions in transform.R
#raw - exact output of first 3 csvs, without any treatment
#base - the baseline.rds object
#mcmc - some sort of initialisation object built from the above to pass to the mcmc
pars <- spimalot::spim_fit_pars_load("parameters", region, "central",
kernel_scaling)
restart_date <- readRDS("parameters/base.rds")[[region[[1]]]]$restart_date
#This sets up a lot of pmcmc controls, checks iterations are compatible etc.
control <- spimalot::spim_control(
short_run, chains, deterministic, date_restart = restart_date,
n_mcmc = n_mcmc, burnin = burnin)
data_rtm <- read_csv("data/rtm.csv")
data_serology <- read_csv("data/serology.csv")
#This trims off dates and columns we don't want
data <- spim_data(
date, region, model_type, data_rtm, data_serology,
trim_deaths, trim_pillar2,
full_data = FALSE)
#Some more particle filter setup, this object can then be "run" below
filter <- spimalot::spim_particle_filter(data, pars$mcmc,
control$particle_filter,
deterministic)
setwd("C:/Users/WILL LIU/Desktop/Data Science/high-dimension-sircovid-MRes/draft/vaccine_delay_fits/20221107-163244-74249650")
check = '8 Nov'
data_rtm <- read_csv("data/rtm.csv")
data_serology <- read_csv("data/serology.csv")
#This trims off dates and columns we don't want
data <- spim_data(
date, region, model_type, data_rtm, data_serology,
trim_deaths, trim_pillar2,
full_data = FALSE)
source("global_util.R")
version_check("sircovid", "0.13.15")
version_check("spimalot", "0.7.11")
date <- "2021-09-13"
model_type <- "BB"
#Some data streams are unreliable for the last few days. Define how many days here.
trim_deaths <- 4
trim_pillar2 <- 5
## MCMC control (only applies if short_run = FALSE)
burnin <- 500
n_mcmc <- 1500
chains <- 4
kernel_scaling <- 0.2
#Checks current region is valid
region <- spimalot::spim_check_region(region, FALSE)
#Checks and assembles all the outputs from vaccine_delay_parameter_fits task
#Output pars is a list containing:
#info - the loaded info.csv
#prior - the loaded prior.csv
#proposal - the loaded proposal.csv
#transform - the functions in transform.R
#raw - exact output of first 3 csvs, without any treatment
#base - the baseline.rds object
#mcmc - some sort of initialisation object built from the above to pass to the mcmc
pars <- spimalot::spim_fit_pars_load("parameters", region, "central",
kernel_scaling)
restart_date <- readRDS("parameters/base.rds")[[region[[1]]]]$restart_date
#This sets up a lot of pmcmc controls, checks iterations are compatible etc.
control <- spimalot::spim_control(
short_run, chains, deterministic, date_restart = restart_date,
n_mcmc = n_mcmc, burnin = burnin)
data_rtm <- read_csv("data/rtm.csv")
data_serology <- read_csv("data/serology.csv")
#This trims off dates and columns we don't want
data <- spim_data(
date, region, model_type, data_rtm, data_serology,
trim_deaths, trim_pillar2,
full_data = FALSE)
setwd("C:/Users/WILL LIU/Desktop/Data Science/high-dimension-sircovid-MRes")
orderly::orderly_develop_start('vaccine_delay_fits',
parameters = list(region = "london",
short_run = TRUE,
deterministic = TRUE),
use_draft = "newer")
data_rtm <- read_csv("data/rtm.csv")
data_serology <- read_csv("data/serology.csv")
#This trims off dates and columns we don't want
data <- spim_data(
date, region, model_type, data_rtm, data_serology,
trim_deaths, trim_pillar2,
full_data = FALSE)
#Some more particle filter setup, this object can then be "run" below
filter <- spimalot::spim_particle_filter(data, pars$mcmc,
control$particle_filter,
deterministic)
setwd("C:/Users/WILL LIU/Desktop/Data Science/high-dimension-sircovid-MRes/draft/vaccine_delay_fits/20221107-163244-74249650")
save.image("C:/Users/WILL LIU/Desktop/Data Science/high-dimension-sircovid-MRes/draft/vaccine_delay_fits/20221107-163244-74249650/.RData")
## This is the data set including series that we do not fit to, and
## with the full series of carehomes deaths.
data_full <- spim_data(
date, region, model_type, data_rtm,
data_serology, trim_deaths, trim_pillar2,
full_data = TRUE)
source("global_util.R")
version_check("sircovid", "0.13.15")
version_check("spimalot", "0.7.11")
date <- "2021-09-13"
model_type <- "BB"
#Some data streams are unreliable for the last few days. Define how many days here.
trim_deaths <- 4
trim_pillar2 <- 5
## MCMC control (only applies if short_run = FALSE)
burnin <- 500
n_mcmc <- 1500
chains <- 4
kernel_scaling <- 0.2
#Checks current region is valid
region <- spimalot::spim_check_region(region, FALSE)
#Checks and assembles all the outputs from vaccine_delay_parameter_fits task
#Output pars is a list containing:
#info - the loaded info.csv
#prior - the loaded prior.csv
#proposal - the loaded proposal.csv
#transform - the functions in transform.R
#raw - exact output of first 3 csvs, without any treatment
#base - the baseline.rds object
#mcmc - some sort of initialisation object built from the above to pass to the mcmc
pars <- spimalot::spim_fit_pars_load("parameters", region, "central",
kernel_scaling)
restart_date <- readRDS("parameters/base.rds")[[region[[1]]]]$restart_date
#This sets up a lot of pmcmc controls, checks iterations are compatible etc.
control <- spimalot::spim_control(
short_run, chains, deterministic, date_restart = restart_date,
n_mcmc = n_mcmc, burnin = burnin)
data_rtm <- read_csv("data/rtm.csv")
data_serology <- read_csv("data/serology.csv")
#This trims off dates and columns we don't want
library(dplyr)
data <- spim_data(
date, region, model_type, data_rtm, data_serology,
trim_deaths, trim_pillar2,
full_data = FALSE)
#Some more particle filter setup, this object can then be "run" below
filter <- spimalot::spim_particle_filter(data, pars$mcmc,
control$particle_filter,
deterministic)
## This bit takes ages, of course
samples <- spimalot::spim_fit_run(pars, filter, control$pmcmc)
## This is the data set including series that we do not fit to, and
## with the full series of carehomes deaths.
data_full <- spim_data(
date, region, model_type, data_rtm,
data_serology, trim_deaths, trim_pillar2,
full_data = TRUE)
## This is the data set including series that we do not fit to, and
## with the full series of carehomes deaths.
data_full <- spim_data(
date, region, model_type, data_rtm,
data_serology, trim_deaths, trim_pillar2,
full_data = TRUE)
## This is new, and used only in sorting out the final outputs. Some
## explanation would be useful.
data_inputs <- list(rtm = data_rtm,
full = data_full,
fitted = data)
dat <- spimalot::spim_fit_process(samples, pars, data_inputs)
dat$fit$simulate$n_doses <-
simulate_calculate_vaccination_new(dat$fit$simulate$state, pars, region)
dat$fit$simulate$n_doses
view(dat$fit$simulate$n_doses)
View(data_rtm)
View(dat$fit$simulate$n_doses)
View(dat$fit$simulate)
