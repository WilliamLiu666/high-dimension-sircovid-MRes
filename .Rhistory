}
else{
return (0)
}
}
q <- 0
epsilon <- .1
L <- 10
output <- rep(0,N)
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i] <- q
}
plot(output)
hist(output[500:N])
U = function(x){
if(x>0){
return (-x)
}
else{
return (0)
}
}
grad_U = function(x) {
if(x>0){
return (-1)
}
else{
return (0)
}
}
q <- 0
epsilon <- .1
L <- 10
output <- rep(0,N)
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i] <- q
}
plot(output)
hist(output[500:N])
U = function(x){
if(x>0){
return (x)
}
else{
return (0)
}
}
grad_U = function(x) {
if(x>0){
return (1)
}
else{
return (0)
}
}
q <- 0
epsilon <- .1
L <- 10
output <- rep(0,N)
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i] <- q
}
plot(output)
hist(output[500:N])
U = function(x){
if(x>0){
return (x)
}
else{
return (0)
}
}
grad_U = function(x) {
if(x>0){
return (1)
}
else{
return (0)
}
}
q <- 0
epsilon <- .001
L <- 10
output <- rep(0,N)
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i] <- q
}
plot(output)
hist(output[500:N])
U = function(x){
if(x>0){
return (x)
}
else{
return (0)
}
}
grad_U = function(x) {
if(x>0){
return (1)
}
else{
return (0)
}
}
q <- 0
epsilon <- .0001
L <- 100
output <- rep(0,N)
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i] <- q
}
plot(output)
hist(output[500:N])
U = function(x){
if(x>0){
return (x)
}
else{
return (0)
}
}
grad_U = function(x) {
if(x>0){
return (1)
}
else{
return (0)
}
}
q <- 0
epsilon <- .01
L <- 1
output <- rep(0,N)
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i] <- q
}
plot(output)
hist(output[500:N])
U = function(x){
if(x>0){
return (x)
}
else{
return (0)
}
}
grad_U = function(x) {
if(x>0){
return (1)
}
else{
return (0)
}
}
q <- 0
epsilon <- .01
L <- 10
output <- rep(0,N)
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i] <- q
}
plot(output)
hist(output[500:N])
HMC = function (U, grad_U, epsilon, L, current_q)
{
q = current_q
p = rnorm(length(q),0,1) # independent standard normal variates
current_p = p
# Make a half step for momentum at the beginning
p = p - epsilon * grad_U(q) / 2
# Alternate full steps for position and momentum
for (i in 1:L)
{
# Make a full step for the position
q = q + epsilon * p
# Make a full step for the momentum, except at end of trajectory
if (i!=L) p = p - epsilon * grad_U(q)
}
# Make a half step for momentum at the end.
p = p - epsilon * grad_U(q) / 2
# Negate momentum at end of trajectory to make the proposal symmetric
p = -p
# Evaluate potential and kinetic energies at start and end of trajectory
current_U = U(current_q)
current_K = sum(current_p^2) / 2
proposed_U = U(q)
proposed_K = sum(p^2) / 2
# Accept or reject the state at end of trajectory, returning either
# the position at the end of the trajectory or the initial position
if (runif(1) < exp(current_U-proposed_U+current_K-proposed_K))
{
return (q) # accept
}
else
{
return (current_q) # reject
}
}
U = function(x){
if(x>0){
return (x)
}
else{
return (0)
}
}
grad_U = function(x) {
if(x>0){
return (1)
}
else{
return (0)
}
}
q <- 0
epsilon <- .01
L <- 10
output <- rep(0,N)
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i] <- q
}
plot(output)
hist(output[500:N])
U = function(x) x^2/2
grad_U = function(x) x
q <- 0
epsilon <- .01
L <- 10
output <- rep(0,N)
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i] <- q
}
plot(output)
hist(output[500:N])
U = function(x){
if(x>0){
return (-x)
}
else{
return (0)
}
}
grad_U = function(x) {
if(x>0){
return (-1)
}
else{
return (0)
}
}
N <- 100000
q <- 0
epsilon <- .01
L <- 10
output <- rep(0,N)
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i] <- q
}
plot(output)
hist(output[500:N])
U = function(x){
if(x>0){
return (x)
}
else{
return (0)
}
}
grad_U = function(x) {
if(x>0){
return (1)
}
else{
return (0)
}
}
N <- 100000
q <- 0
epsilon <- .01
L <- 10
output <- rep(0,N)
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i] <- q
}
plot(output)
hist(output[500:N])
drat:::add("vimc")
install.packages("orderly")
install.packages("drat")
drat:::add("vimc")
install.packages("drat")
install.packages("drat")
install.packages("orderly")
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@0.13.14",
"mrc-ide/spimalot@v0.7.11"))
install.packages("remotes")
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@0.13.14",
"mrc-ide/spimalot@v0.7.11"))
orderly::orderly_run(
"vaccine_delay_fits_data"
)
orderly::orderly_run(
"vaccine_delay_parameters_fits",
parameters = list(deterministic = FALSE),
use_draft = "newer")
orderly::orderly_run('vaccine_delay_fits',
parameters = list(region = "london",
short_run = TRUE,
deterministic = TRUE),
use_draft = "newer")})
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@0.13.14",
"mrc-ide/spimalot@v0.7.11"))
orderly::orderly_run(
"vaccine_delay_fits_data"
)
drat:::add("vimc")
drat:::add("vimc")
install.packages("orderly")
install.packages("orderly")
drat:::add("vimc")
drat:::add("vimc")
install.packages("orderly")
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@0.13.14",
"mrc-ide/spimalot@v0.7.11"))
orderly::orderly_run(
"vaccine_delay_fits_data"
)
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@v0.13.14",
"mrc-ide/spimalot@v0.7.11"))
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@v0.13.14",
"mrc-ide/spimalot@v0.7.11"))
drat:::add("vimc")
install.packages("orderly")
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@0.13.14",
"mrc-ide/spimalot@v0.7.11"))
libraty(remotes)
library(remotes)
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@0.13.14",
"mrc-ide/spimalot@v0.7.11"))
orderly::orderly_run(
"vaccine_delay_fits_data"
)
usethis::create_github_token()
install.packages("usethis")
usethis::create_github_token()
usethis::edit_r_environ()
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@0.13.14",
"mrc-ide/spimalot@v0.7.11"))
usethis::create_github_token()
usethis::create_github_token(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)
usethis::git_sitrep()
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@0.13.14",
"mrc-ide/spimalot@v0.7.11"))
user:email
usethis:: user:email
usethis::edit_r_environ()
usethis::create_github_token()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@0.13.14",
"mrc-ide/spimalot@v0.7.11"))
usethis::git_sitrep()
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@0.13.14",
"mrc-ide/spimalot@v0.7.11"))
gitcreds::gitcreds_set()
gitcreds_get()
gitcreds::gitcreds_get()
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@0.13.14",
"mrc-ide/spimalot@v0.7.11"))
gitcreds::gitcreds_set()
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@0.13.14",
"mrc-ide/spimalot@v0.7.11"))
usethis::create_github_token()
usethis::edit_r_environ()
usethis::edit_r_environ()
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@0.13.14",
"mrc-ide/spimalot@v0.7.11"))
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@0.13.14",
"mrc-ide/spimalot@v0.7.11"))
orderly::orderly_run(
"vaccine_delay_fits_data"
)
drat:::add("vimc")
install.packages("orderly")
install.packages("orderly")
orderly::orderly_run(
"vaccine_delay_fits_data"
)
library(orderly)
library(drat)
remotes::install_github(c(
+     "mrc-ide/dust@v0.11.26",
+     "mrc-ide/mcstate@v0.9.1",
+     "mrc-ide/sircovid@0.13.14",
+     "mrc-ide/spimalot@v0.7.11"))
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@0.13.14",
"mrc-ide/spimalot@v0.7.11"))
install.packages("installr")
library(installr)
updateR()
updateR()
drat:::add("vimc")
drat:::add("vimc")
install.packages('drat')
Sys.setenv(LANG = "en")
drat:::add("vimc")
install.packages("orderly")
install.packages("remotes")
remotes::install_github(c(
"mrc-ide/dust@v0.11.26",
"mrc-ide/mcstate@v0.9.1",
"mrc-ide/sircovid@0.13.14",
"mrc-ide/spimalot@v0.7.11"))
remotes::install_github(c(
"mrc-ide/sircovid@v0.13.14",
"mrc-ide/spimalot@v0.7.11"))
install.packages("distr6")
orderly::orderly_run(
"vaccine_delay_fits_data"
)
remotes::install_github("mrc-ide/spimalot@v0.7.11")
install.packages("distr6")
install.packages('Rtools')
install.packages('Rtools', version = "3.0")
install.packages('orderly')
install.packages("orderly")
remotes::install_github("mrc-ide/spimalot@v0.7.11")
install.Rtools()
library(install)
install.Rtools()
install.packages("distr6")
remotes::install_github("mrc-ide/spimalot@v0.7.11")
remotes::install_github(
+     "mrc-ide/sircovid@v0.13.15")
remotes::install_github("mrc-ide/sircovid@v0.13.15")
orderly::orderly_run(
"vaccine_delay_parameters_fits",
parameters = list(deterministic = TRUE),
use_draft = "newer")
setwd("C:/Users/WILL LIU/Desktop/Data Science/sarscov2-vaccine-delay")
orderly::orderly_run(
"vaccine_delay_parameters_fits",
parameters = list(deterministic = TRUE),
use_draft = "newer")
orderly::orderly_run('vaccine_delay_fits',
parameters = list(region = "london",
short_run = TRUE,
deterministic = TRUE),
use_draft = "newer")
