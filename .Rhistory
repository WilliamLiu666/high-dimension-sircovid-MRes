p = p - epsilon * grad_U(q) / 2
# Negate momentum at end of trajectory to make the proposal symmetric
p = -p
# Evaluate potential and kinetic energies at start and end of trajectory
current_U = U(current_q)
current_K = sum(current_p^2) / 2
proposed_U = U(q)
proposed_K = sum(p^2) / 2
# Accept or reject the state at end of trajectory, returning either
# the position at the end of the trajectory or the initial position
if (runif(1) < exp(current_U-proposed_U+current_K-proposed_K))
{
return (q) # accept
}
else
{
return (current_q) # reject
}
}
U = function(x) t(x) %*% sigma_inv %*% x/2
grad_U = function(x) sigma_inv %*% x
library(matlib)
sigma = matrix(1,2,2)
sigma[1,2] = 1/2
sigma[2,1] = 1/2
sigma_inv = inv(sigma)
N <- 10000
q <- c(0,0)
epsilon <- .001
L <- 1000
output <- matrix(0,N,2)
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i,1:2] <- q
}
HMC = function (U, grad_U, epsilon, L, current_q)
{
q = current_q
### a line to reject state with a given gradient, a way of restraining to the positive value of q
### in the case of the exponential case, probably not the best way of doing it
if(norm(grad_U(q)< -1e5)) return (current_q)
p = rnorm(length(q),0,1) # independent standard normal variates
current_p = p
# Make a half step for momentum at the beginning
p = p - epsilon * grad_U(q) / 2
# Alternate full steps for position and momentum
for (i in 1:L)
{
# Make a full step for the position
q = q + epsilon * p
# Make a full step for the momentum, except at end of trajectory
if (i!=L) p = p - epsilon * grad_U(q)
}
# Make a half step for momentum at the end.
p = p - epsilon * grad_U(q) / 2
# Negate momentum at end of trajectory to make the proposal symmetric
p = -p
# Evaluate potential and kinetic energies at start and end of trajectory
current_U = U(current_q)
current_K = sum(current_p^2) / 2
proposed_U = U(q)
proposed_K = sum(p^2) / 2
# Accept or reject the state at end of trajectory, returning either
# the position at the end of the trajectory or the initial position
if (runif(1) < exp(current_U-proposed_U+current_K-proposed_K))
{
return (q) # accept
}
else
{
return (current_q) # reject
}
}
U = function(x) t(x) %*% sigma_inv %*% x/2
grad_U = function(x) sigma_inv %*% x
library(matlib)
sigma = matrix(1,2,2)
sigma[1,2] = 1/2
sigma[2,1] = 1/2
sigma_inv = inv(sigma)
N <- 10000
q <- c(0,0)
epsilon <- .001
L <- 1000
output <- matrix(0,N,2)
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i,1:2] <- q
}
plot(output[1000:N,1],output[1000:N,2])
acf(output[1000:N,1])
#discard the first 1000
output = output[1000:N,1:2]
hist(output[1:N,1],main = 'First Feature')
#discard the first 1000
output = output[1000:N,1:2]
#discard the first 1000
#output = output[1000:N,1:2]
hist(output[,1],main = 'First Feature')
#discard the first 1000
output = output[1000:N,1:2]
#discard the first 1000
#output = output[1000:N,1:2]
hist(output[,1],main = 'First Feature',xlab = '')
#discard the first 1000
#output = output[1000:N,1:2]
hist(output[,1],main = 'First Feature',xlab = '')
hist(output[,2],main = 'Second Feature',xlab = '')
#acf
acf(output[,1],main = 'First Feature',xlab = '')
#initialize parameters
N <- 10000
q <- c(0,0)
epsilon <- .001
L <- 100
output <- matrix(0,N,2)
#HMC
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i,1:2] <- q
}
#discard the first 1000
output = output[1000:N,1:2]
#acf
acf(output[,1],main = 'First Feature ACF',xlab = '')
acf(output[,2],main = 'Second Feature ACF',xlab = '')
#initialize parameters
N <- 10000
q <- c(0,0)
epsilon <- .01
L <- 1000
output <- matrix(0,N,2)
#HMC
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i,1:2] <- q
}
#discard the first 1000
output = output[1000:N,1:2]
#acf
acf(output[,1],main = 'First Feature ACF',xlab = '')
acf(output[,2],main = 'Second Feature ACF',xlab = '')
N=100000
x = rep(0,N)
y = rep(0,N)
for (i in 2:N){
y[i] = rnorm(1,.5*x[i-1],1-.5^2)
x[i] = rnorm(1,.5*y[i],1-.5^2)
}
hist(x)
hist(y)
plot(x,y)
x = x[1000:N]
y = y[1000:N]
hist(x,main = 'First Feature',xlab = '')
hist(y,main = 'Second Feature',xlab = '')
#acf
acf(x,main = 'First Feature ACF',xlab = '')
acf(y,main = 'Second Feature ACF',xlab = '')
#2d plot
plot(x,y,main = '2D plot',xlab = 'first feature', ylab = 'second feature')
x = rep(0,N)
y = rep(0,N)
for (i in 2:N){
y[i] = rnorm(1,.5*x[i-1],1-.5^2)
x[i] = rnorm(1,.5*y[i],1-.5^2)
}
x = x[1000:N]
y = y[1000:N]
hist(x,main = 'First Feature',xlab = '')
hist(y,main = 'Second Feature',xlab = '')
#acf
acf(x,main = 'First Feature ACF',xlab = '')
acf(y,main = 'Second Feature ACF',xlab = '')
#2d plot
plot(x,y,main = '2D plot',xlab = 'first feature', ylab = 'second feature')
d <- 10
N <- 1000
h <- d^(-1/2)
mean <- matrix(0,d,1)
sigma <- diag(1,d)
output <- matrix(0,d,N)
output[1:d,1] <- rmvnorm(1,mean,sigma)
library(mvtnorm)
install.packages('mvtnorm')
library(mvtnorm)
d <- 10
N <- 1000
h <- d^(-1/2)
mean <- matrix(0,d,1)
sigma <- diag(1,d)
output <- matrix(0,d,N)
output[1:d,1] <- rmvnorm(1,mean,sigma)
for(i in 2:N){
x <- rmvnorm(1,mean,sigma*h^2)
u <- runif(1)
a <- log(dmvnorm(x, mean, sigma*h^2))
b <- log(dmvnorm(output[1:d,i-1], mean, sigma*h^2))
if (log(u) < (a-b)){
output[1:d,i] = x
}
else{
output[1:d,i] = output[1:d,i-1]
}
}
hist(output[1,1:N])
plot(output[1,1:N])
library(mvtnorm)
d <- 10
N <- 10000
h <- d^(-1/2)
mean <- matrix(0,d,1)
sigma <- diag(1,d)
output <- matrix(0,d,N)
output[1:d,1] <- rmvnorm(1,mean,sigma)
for(i in 2:N){
x <- rmvnorm(1,mean,sigma*h^2)
u <- runif(1)
a <- log(dmvnorm(x, mean, sigma*h^2))
b <- log(dmvnorm(output[1:d,i-1], mean, sigma*h^2))
if (log(u) < (a-b)){
output[1:d,i] = x
}
else{
output[1:d,i] = output[1:d,i-1]
}
}
hist(output[1,1:N])
plot(output[1,1:N])
var(output[1,1:N])
library(mvtnorm)
d <- 1
N <- 10000
h <- d^(-1/2)
mean <- matrix(0,d,1)
sigma <- diag(1,d)
output <- matrix(0,d,N)
output[1:d,1] <- rmvnorm(1,mean,sigma)
for(i in 2:N){
x <- rmvnorm(1,mean,sigma*h^2)
u <- runif(1)
a <- log(dmvnorm(x, mean, sigma*h^2))
b <- log(dmvnorm(output[1:d,i-1], mean, sigma*h^2))
if (log(u) < (a-b)){
output[1:d,i] = x
}
else{
output[1:d,i] = output[1:d,i-1]
}
}
var(output[1,1:N])
library(mvtnorm)
d <- 1
N <- 10000
h <- d^(-1/2)
mean <- matrix(0,d,1)
sigma <- diag(1,d)
output <- matrix(0,d,N)
output[1:d,1] <- rmvnorm(1,mean,sigma)
for(i in 2:N){
x <- rmvnorm(1,output[1:d,i-1],sigma*h^2)
u <- runif(1)
a <- log(dmvnorm(x, mean, sigma*h^2))
b <- log(dmvnorm(output[1:d,i-1], mean, sigma*h^2))
if (log(u) < (a-b)){
output[1:d,i] = x
}
else{
output[1:d,i] = output[1:d,i-1]
}
}
var(output[1,1:N])
library(mvtnorm)
d <- 10
N <- 10000
h <- d^(-1/2)
mean <- matrix(0,d,1)
sigma <- diag(1,d)
output <- matrix(0,d,N)
output[1:d,1] <- rmvnorm(1,mean,sigma)
for(i in 2:N){
x <- rmvnorm(1,output[1:d,i-1],sigma*h^2)
u <- runif(1)
a <- log(dmvnorm(x, mean, sigma*h^2))
b <- log(dmvnorm(output[1:d,i-1], mean, sigma*h^2))
if (log(u) < (a-b)){
output[1:d,i] = x
}
else{
output[1:d,i] = output[1:d,i-1]
}
}
var(output[1,1:N])
library(mvtnorm)
d <- 2
N <- 10000
h <- d^(-1/2)
mean <- matrix(0,d,1)
sigma <- diag(1,d)
output <- matrix(0,d,N)
output[1:d,1] <- rmvnorm(1,mean,sigma)
for(i in 2:N){
x <- rmvnorm(1,output[1:d,i-1],sigma*h^2)
u <- runif(1)
a <- log(dmvnorm(x, mean, sigma*h^2))
b <- log(dmvnorm(output[1:d,i-1], mean, sigma*h^2))
if (log(u) < (a-b)){
output[1:d,i] = x
}
else{
output[1:d,i] = output[1:d,i-1]
}
}
var(output[1,1:N])
HMC = function (U, grad_U, epsilon, L, current_q)
{
q = current_q
### a line to reject state with a given gradient, a way of restraining to the positive value of q
### in the case of the exponential case, probably not the best way of doing it
if(norm(grad_U(q)< -1e5)) return (current_q)
p = rnorm(length(q),0,1) # independent standard normal variates
current_p = p
# Make a half step for momentum at the beginning
p = p - epsilon * grad_U(q) / 2
# Alternate full steps for position and momentum
for (i in 1:L)
{
# Make a full step for the position
q = q + epsilon * p
# Make a full step for the momentum, except at end of trajectory
if (i!=L) p = p - epsilon * grad_U(q)
}
# Make a half step for momentum at the end.
p = p - epsilon * grad_U(q) / 2
# Negate momentum at end of trajectory to make the proposal symmetric
p = -p
# Evaluate potential and kinetic energies at start and end of trajectory
current_U = U(current_q)
current_K = sum(current_p^2) / 2
proposed_U = U(q)
proposed_K = sum(p^2) / 2
# Accept or reject the state at end of trajectory, returning either
# the position at the end of the trajectory or the initial position
if (runif(1) < exp(current_U-proposed_U+current_K-proposed_K))
{
return (q) # accept
}
else
{
return (current_q) # reject
}
}
#define U and Grad_u
U = function(x) t(x) %*% sigma_inv %*% x/2
grad_U = function(x) sigma_inv %*% x
#compute sigma invrse
library(matlib)
sigma = matrix(1,2,2)
sigma[1,2] = 0
sigma[2,1] = 0
sigma_inv = inv(sigma)
#initialize parameters
N <- 10000
q <- c(0,0)
epsilon <- .001
L <- 1000
output <- matrix(0,N,2)
#HMC
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i,1:2] <- q
}
var(output[1,1:N])
var(output[1])
var(output[1:N,1])
library(mvtnorm)
d <- 2
N <- 10000
h <- d^(-1/2)
mean <- matrix(0,d,1)
sigma <- diag(1,d)
output <- matrix(0,N,d)
output[1,1:d] <- rmvnorm(1,mean,sigma)
for(i in 2:N){
x <- rmvnorm(1,output[i-1,1:d],sigma*h^2)
u <- runif(1)
a <- log(dmvnorm(x, mean, sigma*h^2))
b <- log(dmvnorm(output[i-1,1:d], mean, sigma*h^2))
if (log(u) < (a-b)){
output[i,1:d] = x
}
else{
output[i,1:d] = output[i-1,1:d]
}
}
var(output[1:N,1])
#define U and Grad_u
U = function(x) t(x) %*% sigma_inv %*% x/2
grad_U = function(x) sigma_inv %*% x
#compute sigma invrse
library(matlib)
sigma = matrix(1,2,2)
sigma[1,2] = 0
sigma[2,1] = 0
sigma_inv = inv(sigma)
#initialize parameters
N <- 10000
q <- c(0,0)
epsilon <- .001
L <- 1000
output <- matrix(0,N,2)
#HMC
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i,1:2] <- q
}
var(output[1:N,1])
#define U and Grad_u
U = function(x) t(x) %*% sigma_inv %*% x/2
grad_U = function(x) sigma_inv %*% x
#compute sigma invrse
d <- 10
library(matlib)
sigma = diag(1,d)
sigma_inv = inv(sigma)
#initialize parameters
N <- 10000
q <- c(0,0)
epsilon <- .001
L <- 1000
output <- matrix(0,N,d)
#HMC
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i,1:d] <- q
}
#define U and Grad_u
U = function(x) t(x) %*% sigma_inv %*% x/2
grad_U = function(x) sigma_inv %*% x
#compute sigma invrse
d <- 10
library(matlib)
sigma = diag(1,d)
sigma_inv = inv(sigma)
#initialize parameters
N <- 10000
q <- rep(0,d)
epsilon <- .001
L <- 1000
output <- matrix(0,N,d)
#HMC
for (i in 1:N){
q <- HMC (U, grad_U, epsilon, L, q)
output[i,1:d] <- q
}
var(output[1:N,1])
library(mvtnorm)
d <- 2
N <- 10000
h <- d^(-1/2)
mean <- matrix(0,d,1)
sigma <- diag(1,d)
output <- matrix(0,N,d)
output[1,1:d] <- rmvnorm(1,mean,sigma)
for(i in 2:N){
x <- rmvnorm(1,output[i-1,1:d],sigma)
u <- runif(1)
a <- log(dmvnorm(x, mean, sigma))
b <- log(dmvnorm(output[i-1,1:d], mean, sigma))
if (log(u) < (a-b)){
output[i,1:d] = x
}
else{
output[i,1:d] = output[i-1,1:d]
}
}
var(output[1:N,1])
hist(output[1:N,1])
library(mvtnorm)
d <- 2
N <- 10000
h <- d^(-1/2)
mean <- matrix(0,d,1)
sigma <- diag(1,d)
output <- matrix(0,N,d)
output[1,1:d] <- rmvnorm(1,mean,sigma)
for(i in 2:N){
x <- rmvnorm(1,output[i-1,1:d],sigma*h^2)
u <- runif(1)
a <- log(dmvnorm(x, mean, sigma))
b <- log(dmvnorm(output[i-1,1:d], mean, sigma))
if (log(u) < (a-b)){
output[i,1:d] = x
}
else{
output[i,1:d] = output[i-1,1:d]
}
}
var(output[1:N,1])
orderly::orderly_develop_start('vaccine_delay_fits',
parameters = list(region = "london",
short_run = TRUE,
deterministic = TRUE),
use_draft = "newer")
setwd("C:/Users/WILL LIU/Desktop/Data Science/high-dimension-sircovid-MRes")
orderly::orderly_develop_start('vaccine_delay_fits',
parameters = list(region = "london",
short_run = TRUE,
deterministic = TRUE),
use_draft = "newer")
View(spim_data)
save.image("C:/Users/WILL LIU/Desktop/Data Science/high-dimension-sircovid-MRes/env.RData")
